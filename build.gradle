plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'mt'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {   // 리포트의 형식과 생성 여부 설정
        html.required = true    // HTML 리포트 생성
        xml.required = false    // XML 리포트 생성하지 않음
        csv.required = false    // CSV 리포트 생성하지 않음
    }

    afterEvaluate { // Gradle 빌드 평가가 끝난 후 실행되는 블록이다.
        // JaCoCo 커버리지 리포트에 포함될 클래스 파일 디렉토리 설정
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [  // 커버리지에서 제외할 파일 패턴 설정
                                '**/*Application*',
                                '**/*Request*',
                                '**/*Response*',
                                '**/*Dto*',
                                '**/*Resolver*',
                                '**/*Interceptor*',
                                '**/*HomeController*',
                                '**/config/**',
                                '**/exception/**',
                                '**/constants/**',
                                '**/util/**'
                    ])
        }))
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.22'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.h2database:h2'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

tasks.register('jacoco', Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test', ':jacocoTestReport')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
}
